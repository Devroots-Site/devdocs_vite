Events in Vue üöÄ
==============================

In diesem Beispiel lernst du, wie du in Vue verschiedene Events verwendest, um auf Benutzerinteraktionen zu reagieren. Dies erm√∂glicht es, dynamisch auf Aktionen wie Klicks, Tastatureingaben oder Mausbewegungen zu antworten.

.. code-block:: vue

    <script setup>
    import { ref } from 'vue'

    const count = ref(0)

    function increment() {
        count.value++
    }
    </script>

    <template>
    <button @click="increment">Count is: {{ count }}</button>
    </template>


Event-Referenz
--------------

Nachfolgend findest du eine Tabelle mit einer √úbersicht der g√§ngigsten Vue-Events und deren Einsatzbeispiele:

.. list-table::
   :header-rows: 1

   * - Event
     - Beschreibung
     - Beispiel
   * - `@click`
     - Wird ausgel√∂st, wenn ein Element angeklickt wird.
     - `<button @click="increment">...</button>`
   * - `@mouseover`
     - Wird ausgel√∂st, wenn die Maus √ºber ein Element f√§hrt.
     - `<div @mouseover="onHover">...</div>`
   * - `@mouseout`
     - Wird ausgel√∂st, wenn die Maus ein Element verl√§sst.
     - `<div @mouseout="onLeave">...</div>`
   * - `@keydown`
     - Wird ausgel√∂st, wenn eine Taste gedr√ºckt wird.
     - `<input @keydown="onKeyDown">`
   * - `@keyup`
     - Wird ausgel√∂st, wenn eine Taste losgelassen wird.
     - `<input @keyup="onKeyUp">`
   * - `@input`
     - Wird ausgel√∂st, wenn der Wert eines Eingabefeldes ge√§ndert wird.
     - `<input @input="onInput">`
   * - `@submit`
     - Wird ausgel√∂st, wenn ein Formular abgeschickt wird.
     - `<form @submit.prevent="onSubmit">`
   * - `@focus`
     - Wird ausgel√∂st, wenn ein Element den Fokus erh√§lt.
     - `<input @focus="onFocus">`
   * - `@blur`
     - Wird ausgel√∂st, wenn ein Element den Fokus verliert.
     - `<input @blur="onBlur">`

Erkl√§rung der Events
--------------------

- In Vue werden Events √ºber die `@`-Syntax an HTML-Elemente gebunden, um auf Benutzerinteraktionen zu reagieren.
- Die obige Tabelle zeigt einige der am h√§ufigsten verwendeten Events sowie deren Verwendung in der Praxis.
- Jedes Event kann eine eigene Methode aufrufen, die eine benutzerdefinierte Aktion ausf√ºhrt.

Besonderheiten bei Events üö®
----------------------------------

.. image:: ../../_static/feature.svg

In Vue bieten Events zahlreiche erweiterte Features, die speziellere Anforderungen abdecken. Hier sind einige zus√§tzliche Event-Optionen, die besonders n√ºtzlich sind:

1. **Event-Modifikatoren**
   Event-Modifikatoren werden verwendet, um das Verhalten von Events anzupassen:

   .. code-block:: vue

      <template>
          <!-- Verhindert die Standardaktion des Browsers -->
          <form @submit.prevent="onSubmit">...</form>

          <!-- Stoppt die Ausbreitung des Events -->
          <button @click.stop="onButtonClick">...</button>

          <!-- Event nur einmal ausf√ºhren -->
          <button @click.once="onButtonClick">...</button>

          <!-- Natives Event auf Kind-Komponenten -->
          <child-component @click.native="onClick">...</child-component>
      </template>

2. **Key-Modifikatoren**
   Key-Modifikatoren erm√∂glichen es, gezielt auf bestimmte Tasten zu reagieren:

   .. code-block:: vue

      <template>
          <!-- Reaktion auf die "Enter"-Taste -->
          <input @keydown.enter="onEnter">

          <!-- Reaktion auf eine beliebige Taste -->
          <input @keydown.space="onSpace">

          <!-- Kombination mit Shift-Taste -->
          <input @keydown.shift.enter="onShiftEnter">
      </template>

3. **System-Modifikatoren**
   System-Modifikatoren reagieren auf spezielle Tasten wie `Ctrl`, `Alt`, `Shift` oder `Meta`:

   .. code-block:: vue

      <template>
          <!-- Nur wenn gleichzeitig `Ctrl` gedr√ºckt wird -->
          <button @click.ctrl="onCtrlClick">...</button>

          <!-- Alt-Taste als Voraussetzung -->
          <button @click.alt="onAltClick">...</button>
      </template>

4. **Event-Verkettung**
   Mehrere Events k√∂nnen kombiniert werden, um komplexe Interaktionen abzubilden:

   .. code-block:: vue

      <template>
          <input 
              @keydown.enter="onSubmit" 
              @keydown.esc="onCancel">
      </template>
      
      
      
Besonderheit von `.stop` üöß
---------------------------

Der `.stop`-Modifikator wird verwendet, um die Ausbreitung eines Events im DOM zu stoppen. Das bedeutet, dass das Event nicht weiter an die √ºbergeordneten Elemente weitergegeben wird (kein Event-Bubbling).

Hier ein Beispiel, das den Unterschied illustriert:

.. code-block:: vue

   <template>
       <div @click="onParentClick">
           <!-- Klick auf dieses Element stoppt das Event-Bubbling -->
           <button @click.stop="onButtonClick">Klicke mich</button>
       </div>
   </template>

   <script setup>
   function onParentClick() {
       console.log("Eltern-Element wurde angeklickt");
   }

   function onButtonClick() {
       console.log("Button wurde angeklickt");
   }
   </script>

**Erkl√§rung:**

1. Wenn der Button ohne `.stop` geklickt wird:
   - Das `@click`-Event wird auf dem Button ausgel√∂st und die Methode `onButtonClick` wird ausgef√ºhrt.
   - Anschlie√üend wird das Event an das √ºbergeordnete `div` weitergegeben und `onParentClick` wird ebenfalls aufgerufen (Event-Bubbling).

2. Wenn der Button mit `.stop` geklickt wird:
   - Das `@click`-Event wird nur auf dem Button verarbeitet (`onButtonClick` wird ausgef√ºhrt).
   - Das Event wird **nicht** an das √ºbergeordnete `div` weitergegeben, daher wird `onParentClick` **nicht** ausgef√ºhrt.

**Praktischer Nutzen:**
- Du kannst so sicherstellen, dass nur spezifische Elemente auf ein Event reagieren, ohne dass versehentlich √ºbergeordnete Elemente ebenfalls das Event behandeln.

**Konsole-Ausgabe im Beispiel:**
- Mit `.stop`: `Button wurde angeklickt`
- Ohne `.stop`: 